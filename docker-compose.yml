version: '3.8'

services:

  # _____   NestJS API   _____ #

  api:
    build:
      dockerfile: Dockerfile
      context: ./app
      # Only build development stage from Dockerfile
      target: ${NODE_ENV}
    # Mount our host dir to the docker container
    # Mount api directory (./app) to (:) docker container (/usr/src/app)
    # Reflect File changes from host to container

    volumes:
      - ./app:/usr/src/app
      - /usr/src/app/node_modules/
    # Run in debug mode: npm run start:debug --> Also start your vscode debugger
    # Run in dev mode: npm run start:dev

    command: npm run start:debug

    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      

    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
      - ${BACKEND_DEBUG_PORT}:${BACKEND_DEBUG_PORT}

    networks:
      - nesjs-network

    env_file:
    - .env



# _____   Angular Frontend  _____ #

  frontend:
    build:
      dockerfile: Dockerfile
      context: ./app-frontend
      target: ${NODE_ENV}

    command: npm run start

    volumes:
      - ./app-frontend:/usr/frontend/src/app
      - /usr/frontend/src/app/node_modules

    ports:
      - 80:${FRONTEND_PORT}

    networks:
      - nesjs-network



  # _____   DB Postgres  _____ #

  postgres:
    container_name: postgres
    image: postgres:15-bullseye

    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: "${POSTGRES_DB_PREFIX}_${POSTGRES_DB_NAME}"
      PG_DATA: /var/lib/postgresql/data

    ports:
      - 35000:${POSTGRES_DB_PORT}

    volumes:
     - ./pgdata/data:/var/lib/postgresql/data

    networks:
      - nesjs-network



  # _____   PG Admin   _____ #
  
  # pgadmin:
  #   depends_on: 
  #     - postgres

  #   container_name: pgadmin

  #   image: dpage/pgadmin4

  #   env_file:
  #     - .env

  #   ports:
  #     - ${PGADMIN_PORT}:80

  #   volumes:
  #     - ./pgdata/pgadmin:/root/.pgadmin

  #   networks:
  #     - nesjs-network





networks:
  nesjs-network: